# -*- coding: utf-8 -*-
"""MobileNetNihayet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rPb7cJoqnD4yK01TvvUA3nqLNTh99K1c
"""

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Flatten, Input, Conv2D, BatchNormalization, ReLU, DepthwiseConv2D, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam
import numpy as np
import matplotlib.pyplot as plt

# MNIST veri setini yükleyin
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Veriyi normalize edin (0-255 aralığından 0-1 aralığına)
x_train = x_train / 255.0
x_test = x_test / 255.0

# Veriyi genişletin (28x28x1 boyutuna)
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)

# Giriş görüntülerini 224x224 boyutuna yeniden boyutlandırın ve RGB'ye dönüştürün
x_train_resized = tf.image.resize(x_train, [64, 64])
x_test_resized = tf.image.resize(x_test, [64, 64])
x_train_rgb = tf.image.grayscale_to_rgb(x_train_resized)
x_test_rgb = tf.image.grayscale_to_rgb(x_test_resized)

# Sınıf etiketlerini one-hot encode edin
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# MobileNet modelini oluşturun
def mobile_net(input_shape=(64, 64, 3), num_classes=10):
    def conv_block(x, filters, kernel_size, strides):
        x = Conv2D(filters, kernel_size, padding='same', strides=strides)(x)
        x = BatchNormalization()(x)
        x = ReLU()(x)
        return x

    def depthwise_conv_block(x, filters, strides):
        x = DepthwiseConv2D(kernel_size=3, padding='same', strides=strides)(x)
        x = BatchNormalization()(x)
        x = ReLU()(x)
        x = Conv2D(filters, kernel_size=1, padding='same', strides=1)(x)
        x = BatchNormalization()(x)
        x = ReLU()(x)
        return x

    inputs = Input(shape=input_shape)
    x = conv_block(inputs, 32, 3, 2)
    x = depthwise_conv_block(x, 64, 1)
    x = depthwise_conv_block(x, 128, 2)
    x = depthwise_conv_block(x, 128, 1)
    x = depthwise_conv_block(x, 256, 2)
    x = depthwise_conv_block(x, 256, 1)
    x = depthwise_conv_block(x, 512, 2)
    for _ in range(5):
        x = depthwise_conv_block(x, 512, 1)
    x = depthwise_conv_block(x, 1024, 2)
    x = depthwise_conv_block(x, 1024, 1)
    x = GlobalAveragePooling2D()(x)
    x = Dense(num_classes, activation='softmax')(x)

    model = Model(inputs, x)
    return model

model = mobile_net()

# Modeli derleyin
model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(x_train_rgb, y_train, validation_data=(x_test_rgb, y_test), epochs=7, batch_size=32)

# Modelin performansını değerlendirin
loss, accuracy = model.evaluate(x_test_rgb, y_test)
print(f'Test Loss: {loss:.4f}')
print(f'Test Accuracy: {accuracy:.4f}')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Eğitim Kaybı')
plt.title('Eğitim Kaybı')
plt.xlabel('Epochs')
plt.ylabel('Kayıp')
plt.legend()

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Eğitim Doğruluğu')
plt.title('Eğitim accuracy')
plt.xlabel('Epochs')
plt.ylabel('Doğruluk')
plt.legend()

plt.show()

from sklearn.metrics import confusion_matrix
import seaborn as sns

y_pred = model.predict(x_test_rgb)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = np.argmax(y_test, axis=1)

# Compute the confusion matrix
cm = confusion_matrix(y_true, y_pred_classes)

# Subplot for confusion matrix
plt.subplot(1, 2, 2)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

plt.tight_layout()
plt.show()

